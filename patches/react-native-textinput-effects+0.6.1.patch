diff --git a/node_modules/react-native-textinput-effects/lib/Kohana.js b/node_modules/react-native-textinput-effects/lib/Kohana.js
index e019e04..dfd4497 100644
--- a/node_modules/react-native-textinput-effects/lib/Kohana.js
+++ b/node_modules/react-native-textinput-effects/lib/Kohana.js
@@ -3,12 +3,16 @@ import PropTypes from 'prop-types';
 import {
   Animated,
   Easing,
-  Text,
   TextInput,
   TouchableWithoutFeedback,
   View,
   StyleSheet,
+  Image
 } from 'react-native';
+import { Text } from '~/src/components/Text'
+
+import { s, sizes } from '~/src/themes'
+
 
 import BaseInput from './BaseInput';
 
@@ -19,11 +23,11 @@ export default class Kohana extends BaseInput {
      * import FontAwesomeIcon from 'react-native-vector-icons/FontAwesome';
      * iconClass={FontAwesomeIcon}
      */
-    iconClass: PropTypes.func.isRequired,
+    // iconClass: PropTypes.func.isRequired,
     /*
      * Passed to react-native-vector-icons library as name prop
      */
-    iconName: PropTypes.string.isRequired,
+    iconName: PropTypes.number,
     /*
      * Passed to react-native-vector-icons library as color prop
      */
@@ -38,14 +42,14 @@ export default class Kohana extends BaseInput {
 
   static defaultProps = {
     easing: Easing.bezier(0.2, 1, 0.3, 1),
-    iconSize: 25,
+    iconSize: 48,
     inputPadding: 16,
     useNativeDriver: false,
   };
 
   render() {
     const {
-      iconClass: Icon,
+      // iconClass: Icon,
       iconColor,
       iconSize,
       iconName,
@@ -56,39 +60,42 @@ export default class Kohana extends BaseInput {
       labelStyle,
       iconContainerStyle,
       labelContainerStyle,
+      showIcon,
+      pointerEventsProps,
+      iconShowIcon
     } = this.props;
     const { focusedAnim, value } = this.state;
 
     return (
       <View
-        style={[styles.container, containerStyle]}
+        style={[styles.container, containerStyle, { backgroundColor: 'white' }]}
         onLayout={this._onLayout}
+        pointerEvents={pointerEventsProps}
       >
         <TouchableWithoutFeedback onPress={this.focus}>
           <Animated.View
             style={{
-              justifyContent: 'center',
-              padding: inputPadding,
+              paddingHorizontal: sizes.pl2,
+              paddingVertical: sizes.pl1,
               transform: [
                 {
                   translateX: focusedAnim.interpolate({
                     inputRange: [0, 1],
-                    outputRange: [-15 - iconSize, 0],
+                    outputRange: [-15 - sizes.w1 * 1.8, 0],
                   }),
                 },
               ],
               ...iconContainerStyle,
             }}
           >
-            <Icon name={iconName} color={iconColor} size={iconSize} />
+            <Image resizeMode={'contain'} style={[{ width: sizes.w1 * 1.9, height: sizes.h1 * 1.9, tintColor: iconColor }]} source={iconName} />
           </Animated.View>
         </TouchableWithoutFeedback>
         <TouchableWithoutFeedback onPress={this.focus}>
           <Animated.View
             style={{
               position: 'absolute',
-              top: inputPadding,
-              left: 0,
+              alignSelf: 'center',
               transform: [
                 {
                   translateX: focusedAnim.interpolate({
@@ -121,6 +128,10 @@ export default class Kohana extends BaseInput {
           onChange={this._onChange}
           underlineColorAndroid={'transparent'}
         />
+        {  showIcon && <Image resizeMode={'contain'} style={[{
+          width: sizes.w1 * 1.9, height: sizes.h1 * 1.9, tintColor: iconColor, alignSelf: 'center'
+        }]} source={iconShowIcon} />
+        }
       </View>
     );
   }
@@ -134,14 +145,17 @@ const styles = StyleSheet.create({
     overflow: 'hidden',
   },
   label: {
-    fontSize: 18,
+    fontSize: sizes.f5,
     fontWeight: 'bold',
     color: '#D2D2D2',
+    marginLeft: sizes.ml2,
   },
   textInput: {
     flex: 1,
     paddingVertical: 0,
     color: 'black',
-    fontSize: 18,
+    fontSize: sizes.f5,
+    alignSelf: 'center'
+
   },
 });
diff --git a/node_modules/react-native-textinput-effects/lib/index.js b/node_modules/react-native-textinput-effects/lib/index.js
index 0426d22..2afd9c9 100644
--- a/node_modules/react-native-textinput-effects/lib/index.js
+++ b/node_modules/react-native-textinput-effects/lib/index.js
@@ -9,6 +9,7 @@ import Kohana from './Kohana';
 import Makiko from './Makiko';
 import Sae from './Sae';
 import Fumi from './Fumi';
+import BaseInput from './BaseInput';
 
 export {
   Kaede,
@@ -22,4 +23,5 @@ export {
   Makiko,
   Sae,
   Fumi,
+  BaseInput
 };
diff --git a/node_modules/react-native-textinput-effects/types/types.d.ts b/node_modules/react-native-textinput-effects/types/types.d.ts
index 7dc2f10..ba99640 100644
--- a/node_modules/react-native-textinput-effects/types/types.d.ts
+++ b/node_modules/react-native-textinput-effects/types/types.d.ts
@@ -31,6 +31,9 @@ declare module "react-native-textinput-effects" {
     animationDuration?: number;
     editable?: boolean;
     height?: number;
+    showIcon?:boolean,
+    pointerEventsProps?:string,
+    iconShowIcon?:string
 
     /* those are TextInput props which are overridden
      * so, i'm calling them manually
@@ -41,8 +44,8 @@ declare module "react-native-textinput-effects" {
   }
 
   interface WithIconProps extends CommonProps {
-    iconClass: React.ComponentClass<any, any>;
-    iconName: string;
+    iconClass?: React.ComponentClass<any, any>;
+    iconName?: string;
     iconColor?: string;
     iconSize?: number;
   }
